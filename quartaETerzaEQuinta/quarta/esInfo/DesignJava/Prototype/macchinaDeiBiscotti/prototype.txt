 /** Prototype Class **/
 public class Cookie implements Cloneable {
   
    public Object clone()
    {
        try{
            Cookie copy = (Cookie)super.clone();

            //In an actual implementation of this pattern you might now change references to
            //the expensive to produce parts from the copies that are held inside the prototype.

            return copy;
        }
        catch(CloneNotSupportedException e)
        {
           e.printStackTrace();
           return null;
        }
    }
 }
 
 /** Concrete Prototypes to clone **/
 public class CoconutCookie extends Cookie { }
 
 /** Client Class**/
 public class CookieMachine
 {
 
   private Cookie cookie;//could have been a private Cloneable cookie; 
 
     public CookieMachine(Cookie cookie) { 
         this.cookie = cookie; 
     } 
     public Cookie makeCookie() { 
       return (Cookie)cookie.clone(); 
     } 
     public Object clone() { } 
 
     public static void main(String args[]){ 
         Cookie tempCookie =  null; 
         Cookie prot = new CoconutCookie(); 
         CookieMachine cm = new CookieMachine(prot); 
         for(int i=0; i<100; i++) 
             tempCookie = cm.makeCookie(); 
     } 
 }